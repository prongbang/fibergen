package core

import (
	"fmt"
	"runtime"
	"strings"

	"github.com/google/uuid"
	"github.com/innotechdevops/core/pointer"
)

func Unwrap[T any](value *T, initial T) T {
	if value == nil {
		return initial
	}
	return *value
}

func UuidPtr() *string {
	uid, err := uuid.NewV7()
	if err != nil {
		return nil
	}
	return pointer.New(uid.String())
}

func Uuid() string {
	uid, err := uuid.NewV7()
	if err != nil {
		return ""
	}
	return uid.String()
}

func IsEmpty(value string) bool {
	return value == ""
}

func IsNotEmpty(value string) bool {
	return !IsEmpty(value)
}

func IsNotEmptyPtr(value *string) bool {
	if value == nil {
		return false
	}
	return !IsEmpty(*value)
}

func IsEmptyList[T any](value *[]T) bool {
	return value == nil || len(*value) == 0
}

func IsNotEmptyList[T any](value *[]T) bool {
	return !IsEmptyList(value)
}

func GetStackTrace(e interface{}) string {
	buf := make([]byte, 1<<20)
	buf = buf[:runtime.Stack(buf, false)]
	msg := fmt.Sprintf("panic: %v\n%s\n", e, buf)
	return msg
}

func TrimBy(data string, separator string) string {
	if separator == "" {
		return data
	}
	return strings.ReplaceAll(data, separator, "")
}

func First[T any](list []T) *T {
	if len(list) == 0 {
		return nil
	}
	return &list[0]
}

func Last[T any](list []T) *T {
	size := len(list)
	if size == 0 {
		return nil
	}
	return &list[size-1]
}
