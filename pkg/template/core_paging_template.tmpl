package core

import (
	"math"
)

const PagingLimitDefault = 20

type Paging struct {
	List  interface{} `json:"list"`
	Page  int64       `json:"page"`
	Limit int64       `json:"limit"`
	Count int64       `json:"count"`
	Total int64       `json:"total"`
	Start int64       `json:"start"`
	End   int64       `json:"end"`
}

func Offset(pageNo int64, limitNo int64) int64 {
	return (limitNo * pageNo) - limitNo
}

func Pagination(data interface{}, pageNo int64, limitNo int64, total int64) *Paging {
    var pageCount = math.Ceil(float64(total) / float64(limitNo))
	pageCountInt := int64(pageCount)
	if pageNo <= 0 {
		pageNo = 1
	}

	var startRow = (pageNo - 1) * limitNo
	var endRow = startRow + limitNo - 1

	return &Paging{
		Page:  pageNo,
		Limit: limitNo,
		Count: pageCountInt,
		Total: total,
		Start: startRow,
		End:   endRow,
	}
}
