package {{.PackageName}}

import (
	"context"
	"{{.Module}}/pkg/core"
	"time"
)

type UseCase interface {
	FindOne(ctx context.Context, obj *One{{.ModelName}}Request) (*{{.ModelName}}, error)
	FindList(ctx context.Context, obj *List{{.ModelName}}Request) (*[]{{.ModelName}}Data, int64, error)
	FindLiteList(ctx context.Context, obj *LiteList{{.ModelName}}Request) (*[]Lite{{.ModelName}}, error)
	Create(ctx context.Context, obj *{{.ModelName}}) (*{{.ModelName}}, error)
	CreateList(ctx context.Context, obj *[]{{.ModelName}}) (*[]{{.ModelName}}, error)
	Update(ctx context.Context, obj *{{.ModelName}}) (*{{.ModelName}}, error)
	UpdateList(ctx context.Context, obj *[]{{.ModelName}})) (*[]{{.ModelName}}), error)
	Delete(ctx context.Context, request *Delete{{.ModelName}}Request) (*Delete{{.ModelName}}Data, error)
}

type useCase struct {
	Repo Repository
}

func (uc *useCase) FindOne(ctx context.Context, obj *One{{.ModelName}}Request) (*{{.ModelName}}, error) {
	data, err := uc.Repo.FindOne(ctx, request.One{{.ModelName}}Criteria)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (uc *useCase) FindList(ctx context.Context, obj *List{{.ModelName}}Request) (*[]{{.ModelName}}Data, int64, error) {
	data, err := uc.Repo.FindList(ctx, request.List{{.ModelName}}Criteria)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (uc *useCase) FindLiteList(ctx context.Context, obj *LiteList{{.ModelName}}Request) (*[]Lite{{.ModelName}}, error) {
	data, err := uc.Repo.FindLiteList(ctx, request.LiteList{{.ModelName}}Criteria)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (uc *useCase) Create(ctx context.Context, obj *{{.ModelName}}) (*{{.ModelName}}, error) {
	obj.CreatedBy = request.UserRequestInfo.Id,

	_, err := uc.Repo.Create(ctx, obj)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (uc *useCase) CreateList(ctx context.Context, obj *[]{{.ModelName}}) (*[]{{.ModelName}}, error) {
    for i, record := range *obj {
        (*obj)[i].CreatedBy = request.UserRequestInfo.Id,
    }

	_, err := uc.Repo.CreateList(ctx, obj)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (uc *useCase) Update(ctx context.Context, request *Update{{.ModelName}}Request) (*{{.ModelName}}, error) {
	data, err := uc.Repo.FindOne(ctx, request.One{{.ModelName}}Criteria{Id: request.Id})
	if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, goerror.NewNotFound()
	}

	data.UpdatedBy = request.UserRequestInfo.Id

	_, err = uc.Repo.Update(ctx, data)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (uc *useCase) UpdateList(ctx context.Context, obj *[]{{.ModelName}})) (*[]{{.ModelName}}), error) {
	for i, record := range *obj {
        (*obj)[i].UpdatedBy = request.UserRequestInfo.Id,
    }

	_, err = uc.Repo.UpdateList(ctx, data)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (uc *useCase) Delete(ctx context.Context, request *Delete{{.ModelName}}Request) (*Delete{{.ModelName}}Data, error) {
	data, err := uc.Repo.FindOne(ctx, request.One{{.ModelName}}Criteria{Id: request.Id})
	if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, goerror.NewNotFound()
	}

	err = uc.Repo.Delete(ctx, request.Id)
	if err != nil {
		return nil, err
	}
	return &Delete{{.ModelName}}Data{}, nil
}

func NewUseCase(repo Repository) UseCase {
	return &useCase{
		Repo: repo,
	}
}