package template

import "fmt"

type docsTemplate struct {
}

func (d *docsTemplate) Text() []byte {
	doc := "`{\n\t\t\"schemes\": {{ marshal .Schemes }},\n\t\t\"swagger\": \"2.0\",\n\t\t\t\"info\": {\n\t\t\t\"description\": \"{{.Description}}\",\n\t\t\t\t\"title\": \"{{.Title}}\",\n\t\t\t\t\"contact\": {},\n\t\t\t\"version\": \"{{.Version}}\"\n\t\t},\n\t\t\"host\": \"{{.Host}}\",\n\t\t\t\"basePath\": \"{{.BasePath}}\",\n\t\t\t\"paths\": {}\n\t}`"
	return []byte(fmt.Sprintf(`// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package apispec

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = %s

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}`, doc))
}

func DocsTemplate() Template {
	return &docsTemplate{}
}
