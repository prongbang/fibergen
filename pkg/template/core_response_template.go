package template

type coreResponseTemplate struct {
}

func (c *coreResponseTemplate) Text() []byte {
	return []byte("package core\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-playground/validator/v10\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"net/http\"\n)\n\nvar (\n\tStatusOK           = http.StatusText(http.StatusOK)\n\tStatusCreated      = http.StatusText(http.StatusCreated)\n\tStatusBadRequest   = http.StatusText(http.StatusBadRequest)\n\tStatusUnauthorized = http.StatusText(http.StatusUnauthorized)\n\tStatusForbidden    = http.StatusText(http.StatusForbidden)\n\tStatusNotFound     = http.StatusText(http.StatusNotFound)\n)\n\ntype Error struct {\n\tMessage string `json:\"message\"`\n}\n\ntype Success struct {\n\tMessage string `json:\"message\"`\n}\n\ntype Response struct {\n\tData    interface{} `json:\"data,omitempty\"`\n\tMessage interface{} `json:\"message\"`\n}\n\ntype Image struct {\n\tURL string `json:\"url\"`\n}\n\ntype Result struct {\n\tCode    int\n\tMessage interface{}\n\tData    interface{}\n}\n\nfunc Resp(c *fiber.Ctx, result Result) error {\n\tmessage := getMessageByStatus(result)\n\tswitch result.Code {\n\tcase http.StatusOK:\n\t\treturn Ok(c, result.Data)\n\tcase http.StatusCreated:\n\t\treturn Created(c, result.Data)\n\tcase http.StatusNoContent:\n\t\treturn NoContent(c, message)\n\tcase http.StatusBadRequest:\n\t\treturn BadRequest(c, message)\n\tcase http.StatusUnauthorized:\n\t\treturn Unauthorized(c, message)\n\tcase http.StatusForbidden:\n\t\treturn Forbidden(c, message)\n\t}\n\treturn NotFound(c, message)\n}\n\nfunc getMessageByStatus(result Result) interface{} {\n\tif result.Message == nil {\n\t\treturn http.StatusText(result.Code)\n\t}\n\n\t// Message type\n\tif _, okValidate := result.Message.(validator.ValidationErrors); okValidate {\n\t\treturn result.Message\n\t}\n\n\tmsgErr, okErr := result.Message.(error)\n\tif okErr {\n\t\treturn msgErr.Error()\n\t}\n\treturn result.Message\n}\n\nfunc Ok(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusOK).JSON(data)\n}\n\nfunc SendStream(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusOK).JSON(data)\n}\n\nfunc Created(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusCreated).JSON(data)\n}\n\nfunc BadRequest(c *fiber.Ctx, data interface{}) error {\n\tif data == nil {\n\t\treturn c.Status(http.StatusBadRequest).JSON(&Response{\n\t\t\tMessage: StatusBadRequest,\n\t\t})\n\t}\n\n\t// Validation Errors\n\tif _, okValidation := data.(validator.ValidationErrors); okValidation {\n\t\tmsgMap := fiber.Map{}\n\t\tfor _, e := range data.(validator.ValidationErrors) {\n\t\t\tmsgMap[e.Field()] = fiber.Map{\n\t\t\t\t\"required\": fmt.Sprintf(\"%s is %s and not empty\", e.Field(), e.Tag()),\n\t\t\t}\n\t\t}\n\t\treturn c.Status(http.StatusBadRequest).JSON(&Response{\n\t\t\tMessage: msgMap,\n\t\t})\n\t}\n\n\t// Other error\n\treturn c.Status(http.StatusBadRequest).JSON(&Response{\n\t\tMessage: data,\n\t})\n}\n\nfunc NotFound(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusNotFound).JSON(&Response{\n\t\tMessage: data,\n\t})\n}\n\nfunc NoContent(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusNoContent).JSON(&Response{\n\t\tMessage: data,\n\t})\n}\n\nfunc Unauthorized(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusUnauthorized).JSON(&Response{\n\t\tMessage: data,\n\t})\n}\n\nfunc Forbidden(c *fiber.Ctx, data interface{}) error {\n\treturn c.Status(http.StatusForbidden).JSON(&Response{\n\t\tMessage: data,\n\t})\n}\n")
}

func CoreResponseTemplate() Template {
	return &coreResponseTemplate{}
}
