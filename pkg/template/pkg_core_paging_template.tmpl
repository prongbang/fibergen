package core

import (
	"math"
)

const PagingLimitDefault = 20

type Paging struct {
	List interface{} `json:"list"`
	PageInfo
}

type PageInfo struct {
	Page  int64 `json:"page"`
	Limit int64 `json:"limit"`
	Count int64 `json:"count"`
	Total int64 `json:"total"`
	Start int64 `json:"start"`
	End   int64 `json:"end"`
}

type PageQuery struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

func Offset(pageNo int64, limitNo int64) int64 {
	return (limitNo * pageNo) - limitNo
}

func GetPageResult(pageNo int64, limitNo int64, total int64) *PageInfo {
	var pageCount = math.Ceil(float64(total) / float64(limitNo))
	pageCountInt := int64(pageCount)
	if pageNo <= 0 {
		pageNo = 1
	}

	var startRow = (pageNo - 1) * limitNo
	var endRow = startRow + limitNo - 1

	return &PageInfo{
		Page:  pageNo,
		Limit: limitNo,
		Count: pageCountInt,
		Total: total,
		Start: startRow,
		End:   endRow,
	}
}

func Pagination(pageNo int64, limitNo int64, getCount func() int64, getData func(limit int64, offset int64) interface{}) Paging {
	total := getCount()
	var pageCount = math.Ceil(float64(total) / float64(limitNo))
	pageCountInt := int64(pageCount)
	if pageNo <= 0 {
		pageNo = 1
	}
	offset := (limitNo * pageNo) - limitNo
	var startRow = (pageNo - 1) * limitNo
	var endRow = startRow + limitNo - 1

	data := getData(limitNo, offset)

	return Paging{
		List: data,
		PageInfo: PageInfo{
			Page:  pageNo,
			Limit: limitNo,
			Count: pageCountInt,
			Total: total,
			Start: startRow,
			End:   endRow,
		},
	}
}

func PaginatedSlice[T any](data []T, offset, limit int64) []T {
	size := int64(len(data))
	if offset >= size {
		return []T{}
	}

	end := offset + limit
	if end > size {
		end = size
	}

	return data[offset:end]
}

func GetPageQuery(page int64, limit int64) *PageQuery {
	pageQuery := &PageQuery{}
	pageQuery.Limit = limit
	pageQuery.Offset = (page - 1) * limit
	return pageQuery
}

func ToQueryLimit(page int64, limit int64) *dbre.Limit {
	queryLimit := &dbre.Limit{}
	queryLimit.PageSize = limit
	queryLimit.Offset = (page - 1) * limit
	return queryLimit
}
