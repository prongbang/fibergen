package streamx

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/prongbang/excelx"
	"io"
	"strings"
)

const (
	ContentTypeTextCsv = "text/csv; charset=UTF-8"
	ContentTypeXlsx    = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

type Stream struct {
	Data        io.Reader
	Size        *int
	ContentType string
	Filename    string
}

func NewStream(filename string, contentType string, data io.Reader, size ...int) *Stream {
	stream := &Stream{Data: data, ContentType: contentType, Filename: filename}
	if len(size) > 0 {
		stream.Size = &size[0]
	}
	return stream
}

func AttachmentHeader(c *fiber.Ctx, contentType string, filename string) {
	c.Context().Response.Header.SetContentType(contentType)
	c.Context().Response.Header.SetCanonical([]byte(fiber.HeaderContentDisposition), []byte(fmt.Sprintf(`attachment; filename="%s"`, filename)))
}

func StringReader(data string) *strings.Reader {
	return strings.NewReader(data)
}

func ExcelReader(file *excelx.Xlsx) *io.PipeReader {
	// Set up an io.Pipe for efficient memory usage
	pr, pw := io.Pipe()

	// Use a goroutine to write the file to the pipe
	go func() {
		// Ensure the pipe writer closes after writing
		defer func(pw *io.PipeWriter) {
			_ = pw.Close()
		}(pw)

		if file.File != nil {
			if err := file.File.Write(pw); err != nil {
				_ = pw.CloseWithError(err)
			}
		}
	}()

	return pr
}
