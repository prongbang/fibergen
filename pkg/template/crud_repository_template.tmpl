package {{.PackageName}}

type Repository interface {
	Count(params Params) int64
	FindList(params Params) []{{.ModelName}}
	FindLiteList(params LiteParams) []Lite{{.ModelName}}
	FindOne(id {{.Pk}}) {{.ModelName}}
	Create(data *Create{{.ModelName}}) error
	Update(data *Update{{.ModelName}}) error
	Delete(id {{.Pk}}) error
}

type repository struct {
	Ds DataSource
}

func (r *repository) Count(params Params) int64 {
	return r.Ds.Count(params)
}

func (r *repository) FindList(params Params) []{{.ModelName}} {
	return r.Ds.FindList(params)
}

func (r *repository) FindLiteList(params LiteParams) []Lite{{.ModelName}} {
	return r.Ds.FindLiteList(params)
}

func (r *repository) FindOne(id {{.Pk}}) {{.ModelName}} {
	return r.Ds.FindOne(id)
}

func (r *repository) Create(data *Create{{.ModelName}}) error {
	return r.Ds.Create(data)
}

func (r *repository) Update(data *Update{{.ModelName}}) error {
	return r.Ds.Update(data)
}

func (r *repository) Delete(id {{.Pk}}) error {
	return r.Ds.Delete(id)
}

func NewRepository(ds DataSource) Repository {
	return &repository{
		Ds: ds,
	}
}